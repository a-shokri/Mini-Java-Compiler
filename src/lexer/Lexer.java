package lexer;/* The following code was generated by JFlex 1.6.1 */


/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
 * Copyright (C) 1998-2009  Gerwin Klein <lsf@jflex.de>                    *
 * All rights reserved.                                                    *
 *                                                                         *
 * License: BSD                                                            *
 *                                                                         *
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */

/* Java 1.2 language lexer specification */

/* Use together with unicode.flex for Unicode preprocesssing */
/* and java12.cup for a Java 1.2 parser                      */

/* Note that this lexer specification is not tuned for speed.
   It is in fact quite slow on integer and floating point literals,
   because the input is read twice and the methods used to parse
   the numbers are not very fast.
   For a production quality application (e.g. a Java compiler)
   this could be optimized */


import java_cup.runtime.Scanner;
import java_cup.runtime.Symbol;


/**
 * This class is a scanner generated by
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.1
 * from the specification file <tt>Spaces/System Workspace/Compiler/JFlexInput.flex</tt>
 */
public class Lexer implements Scanner {

    /**
     * This character denotes the end of file
     */
    public static final int YYEOF = -1;

    /**
     * initial index of the lookahead buffer
     */
    private static final int ZZ_BUFFERSIZE = 16384;

    /**
     * lexical states
     */
    public static final int YYINITIAL = 0;
    public static final int STRING = 2;

    /**
     * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
     * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
     * at the beginning of a line
     * l is of the form l = 2*k, k a non negative integer
     */
    private static final int ZZ_LEXSTATE[] = {
            0, 0, 1, 1
    };

    /**
     * Translates characters to character classes
     */
    private static final String ZZ_CMAP_PACKED =
            "\11\0\1\3\1\2\1\75\1\76\1\1\22\0\1\3\1\56\1\64" +
                    "\3\0\1\60\1\74\1\43\1\44\1\5\1\62\1\52\1\63\1\42" +
                    "\1\4\1\10\1\66\1\65\1\72\1\67\1\11\1\73\1\70\1\71" +
                    "\1\11\1\0\1\51\1\55\1\53\1\54\1\57\1\0\22\6\1\25" +
                    "\7\6\1\47\1\12\1\50\1\0\1\7\1\0\1\17\1\13\1\32" +
                    "\1\23\1\16\1\24\1\30\1\40\1\22\2\6\1\15\1\31\1\20" +
                    "\1\14\1\35\1\6\1\27\1\21\1\26\1\36\1\37\1\34\1\33" +
                    "\1\41\1\6\1\45\1\61\1\46\7\0\1\75\u1fa2\0\1\75\1\75" +
                    "\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\udfe6\0";

    /**
     * Translates characters to character classes
     */
    private static final char[] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

    /**
     * Translates DFA states to action switch labels.
     */
    private static final int[] ZZ_ACTION = zzUnpackAction();

    private static final String ZZ_ACTION_PACKED_0 =
            "\2\0\1\1\2\2\1\3\1\4\1\5\2\6\17\5" +
                    "\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16" +
                    "\1\17\1\20\1\21\1\22\1\23\1\24\2\1\1\25" +
                    "\1\26\1\27\1\30\2\31\1\1\1\32\1\2\1\0" +
                    "\10\5\1\33\13\5\1\34\1\35\1\36\1\37\1\40" +
                    "\1\0\1\41\1\42\1\43\1\44\1\45\1\46\1\47" +
                    "\1\50\1\51\2\0\4\5\1\52\2\5\1\53\13\5" +
                    "\2\0\2\5\1\54\6\5\1\55\1\56\1\5\1\57" +
                    "\3\5\1\60\1\0\3\5\1\61\1\5\1\62\3\5" +
                    "\1\63\1\64\1\5\1\0\1\5\1\65\1\5\1\66" +
                    "\1\67\1\5\1\70\1\71\1\0\1\72\1\73\11\0" +
                    "\1\74\6\0\1\75";

    private static int[] zzUnpackAction() {
        int[] result = new int[168];
        int offset = 0;
        offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
        return result;
    }

    private static int zzUnpackAction(String packed, int offset, int[] result) {
        int i = 0;       /* index in packed string  */
        int j = offset;  /* index in unpacked array */
        int l = packed.length();
        while (i < l) {
            int count = packed.charAt(i++);
            int value = packed.charAt(i++);
            do result[j++] = value; while (--count > 0);
        }
        return j;
    }


    /**
     * Translates a state to a row index in the transition table
     */
    private static final int[] ZZ_ROWMAP = zzUnpackRowMap();

    private static final String ZZ_ROWMAP_PACKED_0 =
            "\0\0\0\77\0\176\0\275\0\176\0\374\0\176\0\u013b" +
                    "\0\176\0\u017a\0\u01b9\0\u01f8\0\u0237\0\u0276\0\u02b5\0\u02f4" +
                    "\0\u0333\0\u0372\0\u03b1\0\u03f0\0\u042f\0\u046e\0\u04ad\0\u04ec" +
                    "\0\u052b\0\176\0\176\0\176\0\176\0\176\0\176\0\176" +
                    "\0\176\0\176\0\u056a\0\u05a9\0\u05e8\0\176\0\176\0\u0627" +
                    "\0\u0666\0\176\0\u06a5\0\176\0\u06e4\0\u0723\0\176\0\u0762" +
                    "\0\176\0\u07a1\0\u07e0\0\u081f\0\u085e\0\u089d\0\u08dc\0\u091b" +
                    "\0\u095a\0\u0999\0\u09d8\0\u013b\0\u0a17\0\u0a56\0\u0a95\0\u0ad4" +
                    "\0\u0b13\0\u0b52\0\u0b91\0\u0bd0\0\u0c0f\0\u0c4e\0\u0c8d\0\176" +
                    "\0\176\0\176\0\176\0\176\0\u0ccc\0\176\0\176\0\176" +
                    "\0\176\0\176\0\176\0\176\0\176\0\176\0\u0d0b\0\u0d4a" +
                    "\0\u0d89\0\u0dc8\0\u0e07\0\u0e46\0\u013b\0\u0e85\0\u0ec4\0\u013b" +
                    "\0\u0f03\0\u0f42\0\u0f81\0\u0fc0\0\u0fff\0\u103e\0\u107d\0\u10bc" +
                    "\0\u10fb\0\u113a\0\u1179\0\u11b8\0\u11f7\0\u1236\0\u1275\0\u013b" +
                    "\0\u12b4\0\u12f3\0\u1332\0\u1371\0\u13b0\0\u13ef\0\u013b\0\u013b" +
                    "\0\u142e\0\u013b\0\u146d\0\u14ac\0\u14eb\0\u013b\0\u152a\0\u1569" +
                    "\0\u15a8\0\u15e7\0\u013b\0\u1626\0\u013b\0\u1665\0\u16a4\0\u16e3" +
                    "\0\u013b\0\u013b\0\u1722\0\u1761\0\u17a0\0\u013b\0\u17df\0\u013b" +
                    "\0\u013b\0\u181e\0\u013b\0\u013b\0\u185d\0\u013b\0\u013b\0\u189c" +
                    "\0\u18db\0\u191a\0\u1959\0\u1998\0\u19d7\0\u1a16\0\u1a55\0\u1a94" +
                    "\0\176\0\u1ad3\0\u1b12\0\u1b51\0\u1b90\0\u1bcf\0\u1c0e\0\176";

    private static int[] zzUnpackRowMap() {
        int[] result = new int[168];
        int offset = 0;
        offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
        return result;
    }

    private static int zzUnpackRowMap(String packed, int offset, int[] result) {
        int i = 0;  /* index in packed string  */
        int j = offset;  /* index in unpacked array */
        int l = packed.length();
        while (i < l) {
            int high = packed.charAt(i++) << 16;
            result[j++] = high | packed.charAt(i++);
        }
        return j;
    }

    /**
     * The transition table of the DFA
     */
    private static final int[] ZZ_TRANS = zzUnpackTrans();

    private static final String ZZ_TRANS_PACKED_0 =
            "\1\3\1\4\2\5\1\6\1\7\1\10\1\3\1\11" +
                    "\1\12\1\3\1\13\1\10\1\14\1\15\1\10\1\16" +
                    "\1\17\1\20\1\10\1\21\1\22\1\23\1\24\1\10" +
                    "\1\25\1\26\1\10\1\27\1\30\1\10\1\31\2\10" +
                    "\1\32\1\33\1\34\1\35\1\36\1\37\1\40\1\41" +
                    "\1\42\1\43\1\44\1\45\1\46\1\47\1\50\1\51" +
                    "\1\52\1\53\1\54\7\12\1\3\1\0\1\5\1\55" +
                    "\1\56\1\57\7\55\1\60\51\55\1\61\12\55\101\0" +
                    "\1\5\100\0\1\62\1\63\77\0\4\10\1\0\27\10" +
                    "\23\0\7\10\13\0\2\12\53\0\7\12\11\0\4\10" +
                    "\1\0\1\10\1\64\25\10\23\0\7\10\11\0\4\10" +
                    "\1\0\3\10\1\65\23\10\23\0\7\10\11\0\4\10" +
                    "\1\0\2\10\1\66\15\10\1\67\6\10\23\0\7\10" +
                    "\11\0\4\10\1\0\3\10\1\70\23\10\23\0\7\10" +
                    "\11\0\4\10\1\0\7\10\1\71\3\10\1\72\13\10" +
                    "\23\0\7\10\11\0\4\10\1\0\5\10\1\73\3\10" +
                    "\1\74\15\10\23\0\7\10\11\0\4\10\1\0\4\10" +
                    "\1\75\22\10\23\0\7\10\11\0\4\10\1\0\13\10" +
                    "\1\76\12\10\1\77\23\0\7\10\11\0\4\10\1\0" +
                    "\14\10\1\100\10\10\1\101\1\10\23\0\7\10\11\0" +
                    "\4\10\1\0\3\10\1\102\23\10\23\0\7\10\11\0" +
                    "\4\10\1\0\4\10\1\103\22\10\23\0\7\10\11\0" +
                    "\4\10\1\0\2\10\1\104\24\10\23\0\7\10\11\0" +
                    "\4\10\1\0\25\10\1\105\1\10\23\0\7\10\11\0" +
                    "\4\10\1\0\23\10\1\106\3\10\23\0\7\10\11\0" +
                    "\4\10\1\0\1\10\1\107\25\10\23\0\7\10\56\0" +
                    "\1\110\76\0\1\111\76\0\1\112\103\0\1\113\77\0" +
                    "\1\114\102\0\1\115\11\0\1\55\2\0\7\55\1\0" +
                    "\51\55\1\0\12\55\2\0\1\57\74\0\1\116\2\0" +
                    "\7\116\1\117\1\120\4\116\1\121\3\116\1\122\1\116" +
                    "\1\123\1\124\34\116\1\125\7\116\1\126\2\0\1\62" +
                    "\1\4\1\5\74\62\5\127\1\130\71\127\6\0\4\10" +
                    "\1\0\1\10\1\131\25\10\23\0\7\10\11\0\4\10" +
                    "\1\0\5\10\1\132\21\10\23\0\7\10\11\0\4\10" +
                    "\1\0\6\10\1\133\20\10\23\0\7\10\11\0\4\10" +
                    "\1\0\13\10\1\134\13\10\23\0\7\10\11\0\4\10" +
                    "\1\0\21\10\1\135\5\10\23\0\7\10\11\0\4\10" +
                    "\1\0\10\10\1\136\16\10\23\0\7\10\11\0\4\10" +
                    "\1\0\4\10\1\137\22\10\23\0\7\10\11\0\4\10" +
                    "\1\0\13\10\1\140\13\10\23\0\7\10\11\0\4\10" +
                    "\1\0\2\10\1\141\24\10\23\0\7\10\11\0\4\10" +
                    "\1\0\14\10\1\142\12\10\23\0\7\10\11\0\4\10" +
                    "\1\0\6\10\1\143\20\10\23\0\7\10\11\0\4\10" +
                    "\1\0\23\10\1\144\3\10\23\0\7\10\11\0\4\10" +
                    "\1\0\7\10\1\145\17\10\23\0\7\10\11\0\4\10" +
                    "\1\0\13\10\1\146\13\10\23\0\7\10\11\0\4\10" +
                    "\1\0\7\10\1\147\17\10\23\0\7\10\11\0\4\10" +
                    "\1\0\4\10\1\150\22\10\23\0\7\10\11\0\4\10" +
                    "\1\0\7\10\1\151\17\10\23\0\7\10\11\0\4\10" +
                    "\1\0\1\152\26\10\23\0\7\10\11\0\4\10\1\0" +
                    "\7\10\1\153\17\10\23\0\7\10\71\0\1\154\10\0" +
                    "\5\127\1\155\71\127\4\0\1\5\1\130\77\0\4\10" +
                    "\1\0\2\10\1\156\24\10\23\0\7\10\11\0\4\10" +
                    "\1\0\15\10\1\157\11\10\23\0\7\10\11\0\4\10" +
                    "\1\0\3\10\1\160\23\10\23\0\7\10\11\0\4\10" +
                    "\1\0\3\10\1\161\23\10\23\0\7\10\11\0\4\10" +
                    "\1\0\3\10\1\162\23\10\23\0\7\10\11\0\4\10" +
                    "\1\0\13\10\1\163\13\10\23\0\7\10\11\0\4\10" +
                    "\1\0\6\10\1\164\20\10\23\0\7\10\11\0\4\10" +
                    "\1\0\7\10\1\165\17\10\23\0\7\10\11\0\4\10" +
                    "\1\0\13\10\1\166\13\10\23\0\7\10\11\0\4\10" +
                    "\1\0\3\10\1\167\23\10\23\0\7\10\11\0\4\10" +
                    "\1\0\6\10\1\170\20\10\23\0\7\10\11\0\4\10" +
                    "\1\0\23\10\1\171\3\10\23\0\7\10\11\0\4\10" +
                    "\1\0\5\10\1\172\21\10\23\0\7\10\11\0\4\10" +
                    "\1\0\6\10\1\173\20\10\23\0\7\10\11\0\4\10" +
                    "\1\0\2\10\1\174\24\10\23\0\7\10\11\0\4\10" +
                    "\1\0\2\10\1\175\24\10\23\0\7\10\11\0\4\10" +
                    "\1\0\10\10\1\176\16\10\23\0\7\10\72\0\1\177" +
                    "\7\0\4\127\1\5\1\155\71\127\6\0\4\10\1\0" +
                    "\3\10\1\200\23\10\23\0\7\10\11\0\4\10\1\0" +
                    "\13\10\1\201\13\10\23\0\7\10\11\0\4\10\1\0" +
                    "\5\10\1\202\21\10\23\0\7\10\11\0\4\10\1\0" +
                    "\11\10\1\203\15\10\23\0\7\10\11\0\4\10\1\0" +
                    "\7\10\1\204\17\10\23\0\7\10\11\0\4\10\1\0" +
                    "\3\10\1\205\23\10\23\0\7\10\11\0\4\10\1\0" +
                    "\5\10\1\206\21\10\23\0\7\10\11\0\4\10\1\0" +
                    "\3\10\1\207\23\10\23\0\7\10\11\0\4\10\1\0" +
                    "\14\10\1\210\12\10\23\0\7\10\11\0\4\10\1\0" +
                    "\6\10\1\211\20\10\23\0\7\10\11\0\4\10\1\0" +
                    "\3\10\1\212\23\10\23\0\7\10\11\0\4\10\1\0" +
                    "\7\10\1\213\17\10\23\0\7\10\73\0\1\214\14\0" +
                    "\4\10\1\0\4\10\1\215\22\10\23\0\7\10\11\0" +
                    "\4\10\1\0\25\10\1\216\1\10\23\0\7\10\11\0" +
                    "\4\10\1\0\10\10\1\217\16\10\23\0\7\10\11\0" +
                    "\4\10\1\0\17\10\1\220\7\10\23\0\7\10\11\0" +
                    "\4\10\1\0\15\10\1\221\11\10\23\0\7\10\11\0" +
                    "\4\10\1\0\16\10\1\222\10\10\23\0\7\10\11\0" +
                    "\4\10\1\0\5\10\1\223\21\10\23\0\7\10\11\0" +
                    "\4\10\1\0\17\10\1\224\7\10\23\0\7\10\72\0" +
                    "\1\225\15\0\4\10\1\0\5\10\1\226\21\10\23\0" +
                    "\7\10\11\0\4\10\1\0\6\10\1\227\20\10\23\0" +
                    "\7\10\11\0\4\10\1\0\27\10\1\230\22\0\7\10" +
                    "\74\0\1\231\21\0\1\232\154\0\1\233\42\0\1\234" +
                    "\133\0\1\235\31\0\1\236\137\0\1\237\51\0\1\240" +
                    "\125\0\1\241\42\0\1\242\70\0\1\243\71\0\1\244" +
                    "\74\0\1\245\104\0\1\246\65\0\1\247\101\0\1\250" +
                    "\56\0";

    private static int[] zzUnpackTrans() {
        int[] result = new int[7245];
        int offset = 0;
        offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
        return result;
    }

    private static int zzUnpackTrans(String packed, int offset, int[] result) {
        int i = 0;       /* index in packed string  */
        int j = offset;  /* index in unpacked array */
        int l = packed.length();
        while (i < l) {
            int count = packed.charAt(i++);
            int value = packed.charAt(i++);
            value--;
            do result[j++] = value; while (--count > 0);
        }
        return j;
    }


    /* error codes */
    private static final int ZZ_UNKNOWN_ERROR = 0;
    private static final int ZZ_NO_MATCH = 1;
    private static final int ZZ_PUSHBACK_2BIG = 2;

    /* error messages for the codes above */
    private static final String ZZ_ERROR_MSG[] = {
            "Unknown internal scanner error",
            "Error: could not match input",
            "Error: pushback value was too large"
    };

    /**
     * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
     */
    private static final int[] ZZ_ATTRIBUTE = zzUnpackAttribute();

    private static final String ZZ_ATTRIBUTE_PACKED_0 =
            "\2\0\1\11\1\1\1\11\1\1\1\11\1\1\1\11" +
                    "\20\1\11\11\3\1\2\11\2\1\1\11\1\1\1\11" +
                    "\2\1\1\11\1\1\1\11\1\1\1\0\24\1\5\11" +
                    "\1\0\11\11\2\0\23\1\2\0\21\1\1\0\14\1" +
                    "\1\0\10\1\1\0\2\1\11\0\1\11\6\0\1\11";

    private static int[] zzUnpackAttribute() {
        int[] result = new int[168];
        int offset = 0;
        offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
        return result;
    }

    private static int zzUnpackAttribute(String packed, int offset, int[] result) {
        int i = 0;       /* index in packed string  */
        int j = offset;  /* index in unpacked array */
        int l = packed.length();
        while (i < l) {
            int count = packed.charAt(i++);
            int value = packed.charAt(i++);
            do result[j++] = value; while (--count > 0);
        }
        return j;
    }

    /**
     * the input device
     */
    private java.io.Reader zzReader;

    /**
     * the current state of the DFA
     */
    private int zzState;

    /**
     * the current lexical state
     */
    private int zzLexicalState = YYINITIAL;

    /**
     * this buffer contains the current text to be matched and is
     * the source of the yytext() string
     */
    private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

    /**
     * the textposition at the last accepting state
     */
    private int zzMarkedPos;

    /**
     * the current text position in the buffer
     */
    private int zzCurrentPos;

    /**
     * startRead marks the beginning of the yytext() string in the buffer
     */
    private int zzStartRead;

    /**
     * endRead marks the last character in the buffer, that has been read
     * from input
     */
    private int zzEndRead;

    /**
     * number of newlines encountered up to the start of the matched text
     */
    private int yyline;

    /**
     * the number of characters up to the start of the matched text
     */
    private int yychar;

    /**
     * the number of characters from the last newline up to the start of the
     * matched text
     */
    private int yycolumn;

    /**
     * zzAtBOL == true <=> the scanner is currently at the beginning of a line
     */
    private boolean zzAtBOL = true;

    /**
     * zzAtEOF == true <=> the scanner is at the EOF
     */
    private boolean zzAtEOF;

    /**
     * denotes if the user-EOF-code has already been executed
     */
    private boolean zzEOFDone;

    /**
     * The number of occupied positions in zzBuffer beyond zzEndRead.
     * When a lead/high surrogate has been read from the input stream
     * into the final zzBuffer position, this will have a value of 1;
     * otherwise, it will have a value of 0.
     */
    private int zzFinalHighSurrogate = 0;

    /* user code: */
    StringBuilder string = new StringBuilder();
    JavaSymbol currentSymbol = null;

    private Symbol symbol(int type) {

        currentSymbol = new JavaSymbol(type, yyline + 1, yycolumn + 1);
        return currentSymbol;

    }

    private Symbol symbol(int type, Object value) {

        currentSymbol = new JavaSymbol(type, yyline + 1, yycolumn + 1, value);
        return currentSymbol;

    }

    public JavaSymbol getCurrent() {
        return currentSymbol;
    }

    /**
     * assumes correct representation of a long value for
     * specified radix in scanner buffer from <code>start</code>
     * to <code>end</code>
     */
    private long parseLong(int start, int end, int radix) {
        long result = 0;
        long digit;

        for (int i = start; i < end; i++) {
            digit = Character.digit(yycharat(i), radix);
            result *= radix;
            result += digit;
        }

        return result;
    }


    /**
     * Creates a new scanner
     *
     * @param in the java.io.Reader to read input from.
     */
    public Lexer(java.io.Reader in) {
        this.zzReader = in;
    }


    /**
     * Unpacks the compressed character translation table.
     *
     * @param packed the packed character translation table
     * @return the unpacked character translation table
     */
    private static char[] zzUnpackCMap(String packed) {
        char[] map = new char[0x110000];
        int i = 0;  /* index in packed string  */
        int j = 0;  /* index in unpacked array */
        while (i < 194) {
            int count = packed.charAt(i++);
            char value = packed.charAt(i++);
            do map[j++] = value; while (--count > 0);
        }
        return map;
    }


    /**
     * Refills the input buffer.
     *
     * @return <code>false</code>, iff there was new input.
     * @throws java.io.IOException if any I/O-Error occurs
     */
    private boolean zzRefill() throws java.io.IOException {

        /* first: make room (if you can) */
        if (zzStartRead > 0) {
            zzEndRead += zzFinalHighSurrogate;
            zzFinalHighSurrogate = 0;
            System.arraycopy(zzBuffer, zzStartRead,
                    zzBuffer, 0,
                    zzEndRead - zzStartRead);

            /* translate stored positions */
            zzEndRead -= zzStartRead;
            zzCurrentPos -= zzStartRead;
            zzMarkedPos -= zzStartRead;
            zzStartRead = 0;
        }

        /* is the buffer big enough? */
        if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
            /* if not: blow it up */
            char newBuffer[] = new char[zzBuffer.length * 2];
            System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
            zzBuffer = newBuffer;
            zzEndRead += zzFinalHighSurrogate;
            zzFinalHighSurrogate = 0;
        }

        /* fill the buffer with new input */
        int requested = zzBuffer.length - zzEndRead;
        int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

        /* not supposed to occur according to specification of java.io.Reader */
        if (numRead == 0) {
            throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
        }
        if (numRead > 0) {
            zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
            if (numRead == requested) {
                if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
                    --zzEndRead;
                    zzFinalHighSurrogate = 1;
                }
            }
            /* potentially more input available */
            return false;
        }

        /* numRead < 0 ==> end of stream */
        return true;
    }


    /**
     * Closes the input stream.
     */
    public final void yyclose() throws java.io.IOException {
        zzAtEOF = true;            /* indicate end of file */
        zzEndRead = zzStartRead;  /* invalidate buffer    */

        if (zzReader != null)
            zzReader.close();
    }


    /**
     * Resets the scanner to read from a new input stream.
     * Does not close the old reader.
     * <p>
     * All internal variables are reset, the old input stream
     * <b>cannot</b> be reused (internal buffer is discarded and lost).
     * Lexical state is set to <tt>ZZ_INITIAL</tt>.
     * <p>
     * Internal scan buffer is resized down to its initial length, if it has grown.
     *
     * @param reader the new input stream
     */
    public final void yyreset(java.io.Reader reader) {
        zzReader = reader;
        zzAtBOL = true;
        zzAtEOF = false;
        zzEOFDone = false;
        zzEndRead = zzStartRead = 0;
        zzCurrentPos = zzMarkedPos = 0;
        zzFinalHighSurrogate = 0;
        yyline = yychar = yycolumn = 0;
        zzLexicalState = YYINITIAL;
        if (zzBuffer.length > ZZ_BUFFERSIZE)
            zzBuffer = new char[ZZ_BUFFERSIZE];
    }


    /**
     * Returns the current lexical state.
     */
    public final int yystate() {
        return zzLexicalState;
    }


    /**
     * Enters a new lexical state
     *
     * @param newState the new lexical state
     */
    public final void yybegin(int newState) {
        zzLexicalState = newState;
    }


    /**
     * Returns the text matched by the current regular expression.
     */
    public final String yytext() {
        return new String(zzBuffer, zzStartRead, zzMarkedPos - zzStartRead);
    }


    /**
     * Returns the character at position <tt>pos</tt> from the
     * matched text.
     * <p>
     * It is equivalent to yytext().charAt(pos), but faster
     *
     * @param pos the position of the character to fetch.
     *            A value from 0 to yylength()-1.
     * @return the character at position pos
     */
    public final char yycharat(int pos) {
        return zzBuffer[zzStartRead + pos];
    }


    /**
     * Returns the length of the matched text region.
     */
    public final int yylength() {
        return zzMarkedPos - zzStartRead;
    }


    /**
     * Reports an error that occured while scanning.
     * <p>
     * In a wellformed scanner (no or only correct usage of
     * yypushback(int) and a match-all fallback rule) this method
     * will only be called with things that "Can't Possibly Happen".
     * If this method is called, something is seriously wrong
     * (e.g. a JFlex bug producing a faulty scanner etc.).
     * <p>
     * Usual syntax/scanner level error handling should be done
     * in error fallback rules.
     *
     * @param errorCode the code of the errormessage to display
     */
    private void zzScanError(int errorCode) {
        String message;
        try {
            message = ZZ_ERROR_MSG[errorCode];
        } catch (ArrayIndexOutOfBoundsException e) {
            message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
        }

        throw new Error(message);
    }


    /**
     * Pushes the specified amount of characters back into the input stream.
     * <p>
     * They will be read again by then next call of the scanning method
     *
     * @param number the number of characters to be read again.
     *               This number must not be greater than yylength()!
     */
    public void yypushback(int number) {
        if (number > yylength())
            zzScanError(ZZ_PUSHBACK_2BIG);

        zzMarkedPos -= number;
    }


    /**
     * Contains user EOF-code, which will be executed exactly once,
     * when the end of file is reached
     */
    private void zzDoEOF() throws java.io.IOException {
        if (!zzEOFDone) {
            zzEOFDone = true;
            yyclose();
        }
    }


    /**
     * Resumes scanning until the next regular expression is matched,
     * the end of input is encountered or an I/O-Error occurs.
     *
     * @return the next token
     * @throws java.io.IOException if any I/O-Error occurs
     */
    public java_cup.runtime.Symbol next_token() throws java.io.IOException {
        int zzInput;
        int zzAction;

        // cached fields:
        int zzCurrentPosL;
        int zzMarkedPosL;
        int zzEndReadL = zzEndRead;
        char[] zzBufferL = zzBuffer;
        char[] zzCMapL = ZZ_CMAP;

        int[] zzTransL = ZZ_TRANS;
        int[] zzRowMapL = ZZ_ROWMAP;
        int[] zzAttrL = ZZ_ATTRIBUTE;

        while (true) {
            zzMarkedPosL = zzMarkedPos;

            boolean zzR = false;
            int zzCh;
            int zzCharCount;
            for (zzCurrentPosL = zzStartRead;
                 zzCurrentPosL < zzMarkedPosL;
                 zzCurrentPosL += zzCharCount) {
                zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
                zzCharCount = Character.charCount(zzCh);
                switch (zzCh) {
                    case '\u000B':
                    case '\u000C':
                    case '\u0085':
                    case '\u2028':
                    case '\u2029':
                        yyline++;
                        yycolumn = 0;
                        zzR = false;
                        break;
                    case '\r':
                        yyline++;
                        yycolumn = 0;
                        zzR = true;
                        break;
                    case '\n':
                        if (zzR)
                            zzR = false;
                        else {
                            yyline++;
                            yycolumn = 0;
                        }
                        break;
                    default:
                        zzR = false;
                        yycolumn += zzCharCount;
                }
            }

            if (zzR) {
                // peek one character ahead if it is \n (if we have counted one line too much)
                boolean zzPeek;
                if (zzMarkedPosL < zzEndReadL)
                    zzPeek = zzBufferL[zzMarkedPosL] == '\n';
                else if (zzAtEOF)
                    zzPeek = false;
                else {
                    boolean eof = zzRefill();
                    zzEndReadL = zzEndRead;
                    zzMarkedPosL = zzMarkedPos;
                    zzBufferL = zzBuffer;
                    if (eof)
                        zzPeek = false;
                    else
                        zzPeek = zzBufferL[zzMarkedPosL] == '\n';
                }
                if (zzPeek) yyline--;
            }
            zzAction = -1;

            zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

            zzState = ZZ_LEXSTATE[zzLexicalState];

            // set up zzAction for empty match case:
            int zzAttributes = zzAttrL[zzState];
            if ((zzAttributes & 1) == 1) {
                zzAction = zzState;
            }


            zzForAction:
            {
                while (true) {

                    if (zzCurrentPosL < zzEndReadL) {
                        zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
                        zzCurrentPosL += Character.charCount(zzInput);
                    } else if (zzAtEOF) {
                        zzInput = YYEOF;
                        break zzForAction;
                    } else {
                        // store back cached positions
                        zzCurrentPos = zzCurrentPosL;
                        zzMarkedPos = zzMarkedPosL;
                        boolean eof = zzRefill();
                        // get translated positions and possibly new buffer
                        zzCurrentPosL = zzCurrentPos;
                        zzMarkedPosL = zzMarkedPos;
                        zzBufferL = zzBuffer;
                        zzEndReadL = zzEndRead;
                        if (eof) {
                            zzInput = YYEOF;
                            break zzForAction;
                        } else {
                            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
                            zzCurrentPosL += Character.charCount(zzInput);
                        }
                    }
                    int zzNext = zzTransL[zzRowMapL[zzState] + zzCMapL[zzInput]];
                    if (zzNext == -1) break zzForAction;
                    zzState = zzNext;

                    zzAttributes = zzAttrL[zzState];
                    if ((zzAttributes & 1) == 1) {
                        zzAction = zzState;
                        zzMarkedPosL = zzCurrentPosL;
                        if ((zzAttributes & 8) == 8) break zzForAction;
                    }

                }
            }

            // store back cached position
            zzMarkedPos = zzMarkedPosL;

            if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
                zzAtEOF = true;
                zzDoEOF();
                {
                    return symbol(CommonConstants.SymbolMapping.get(CommonConstants.SymbolName.EOF));
                }
            } else {
                switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
                    case 1: {
                        throw new RuntimeException("Illegal character \"" + yytext() +
                                "\" at line " + yyline + ", column " + yycolumn);
                    }
                    case 62:
                        break;
                    case 2: { /* ignore */
                    }
                    case 63:
                        break;
                    case 3: {
                        return symbol(CommonConstants.SymbolMapping.get(CommonConstants.SymbolName.DIV));
                    }
                    case 64:
                        break;
                    case 4: {
                        return symbol(CommonConstants.SymbolMapping.get(CommonConstants.SymbolName.TIMES));
                    }
                    case 65:
                        break;
                    case 5: {
                        return symbol(CommonConstants.SymbolMapping.get(CommonConstants.SymbolName.ID), yytext());
                    }
                    case 66:
                        break;
                    case 6: {
                        return symbol(CommonConstants.SymbolMapping.get(CommonConstants.SymbolName.INTLIT), new Integer(yytext()));
                    }
                    case 67:
                        break;
                    case 7: {
                        return symbol(CommonConstants.SymbolMapping.get(CommonConstants.SymbolName.DOT));
                    }
                    case 68:
                        break;
                    case 8: {
                        return symbol(CommonConstants.SymbolMapping.get(CommonConstants.SymbolName.LPAREN));
                    }
                    case 69:
                        break;
                    case 9: {
                        return symbol(CommonConstants.SymbolMapping.get(CommonConstants.SymbolName.RPAREN));
                    }
                    case 70:
                        break;
                    case 10: {
                        return symbol(CommonConstants.SymbolMapping.get(CommonConstants.SymbolName.LBRACE));
                    }
                    case 71:
                        break;
                    case 11: {
                        return symbol(CommonConstants.SymbolMapping.get(CommonConstants.SymbolName.RBRACE));
                    }
                    case 72:
                        break;
                    case 12: {
                        return symbol(CommonConstants.SymbolMapping.get(CommonConstants.SymbolName.LBRACKET));
                    }
                    case 73:
                        break;
                    case 13: {
                        return symbol(CommonConstants.SymbolMapping.get(CommonConstants.SymbolName.RBRACKET));
                    }
                    case 74:
                        break;
                    case 14: {
                        return symbol(CommonConstants.SymbolMapping.get(CommonConstants.SymbolName.SEMICOLON));
                    }
                    case 75:
                        break;
                    case 15: {
                        return symbol(CommonConstants.SymbolMapping.get(CommonConstants.SymbolName.COMMA));
                    }
                    case 76:
                        break;
                    case 16: {
                        return symbol(CommonConstants.SymbolMapping.get(CommonConstants.SymbolName.EQ));
                    }
                    case 77:
                        break;
                    case 17: {
                        return symbol(CommonConstants.SymbolMapping.get(CommonConstants.SymbolName.GT));
                    }
                    case 78:
                        break;
                    case 18: {
                        return symbol(CommonConstants.SymbolMapping.get(CommonConstants.SymbolName.LT));
                    }
                    case 79:
                        break;
                    case 19: {
                        return symbol(CommonConstants.SymbolMapping.get(CommonConstants.SymbolName.NOT));
                    }
                    case 80:
                        break;
                    case 20: {
                        return symbol(CommonConstants.SymbolMapping.get(CommonConstants.SymbolName.QUESTION));
                    }
                    case 81:
                        break;
                    case 21: {
                        return symbol(CommonConstants.SymbolMapping.get(CommonConstants.SymbolName.PLUS));
                    }
                    case 82:
                        break;
                    case 22: {
                        return symbol(CommonConstants.SymbolMapping.get(CommonConstants.SymbolName.MINUS));
                    }
                    case 83:
                        break;
                    case 23: {
                        string.setLength(0);
                        yybegin(STRING);
                    }
                    case 84:
                        break;
                    case 24: {
                        string.append(yytext());
                    }
                    case 85:
                        break;
                    case 25: {
                        throw new RuntimeException("Unterminated string at end of line");
                    }
                    case 86:
                        break;
                    case 26: {
                        yybegin(YYINITIAL);
                        return symbol(CommonConstants.SymbolMapping.get(CommonConstants.SymbolName.STRING_LITERAL),
                                string.toString());
                    }
                    case 87:
                        break;
                    case 27: {
                        return symbol(CommonConstants.SymbolMapping.get(CommonConstants.SymbolName.IF));
                    }
                    case 88:
                        break;
                    case 28: {
                        return symbol(CommonConstants.SymbolMapping.get(CommonConstants.SymbolName.EQEQ));
                    }
                    case 89:
                        break;
                    case 29: {
                        return symbol(CommonConstants.SymbolMapping.get(CommonConstants.SymbolName.GTEQ));
                    }
                    case 90:
                        break;
                    case 30: {
                        return symbol(CommonConstants.SymbolMapping.get(CommonConstants.SymbolName.LTEQ));
                    }
                    case 91:
                        break;
                    case 31: {
                        return symbol(CommonConstants.SymbolMapping.get(CommonConstants.SymbolName.ANDAND));
                    }
                    case 92:
                        break;
                    case 32: {
                        return symbol(CommonConstants.SymbolMapping.get(CommonConstants.SymbolName.OROR));
                    }
                    case 93:
                        break;
                    case 33: {
                        throw new RuntimeException("Illegal escape sequence \"" + yytext() + "\"");
                    }
                    case 94:
                        break;
                    case 34: {
                        string.append('\\');
                    }
                    case 95:
                        break;
                    case 35: {
                        string.append('\b');
                    }
                    case 96:
                        break;
                    case 36: {
                        string.append('\n');
                    }
                    case 97:
                        break;
                    case 37: {
                        string.append('\f');
                    }
                    case 98:
                        break;
                    case 38: {
                        string.append('\t');
                    }
                    case 99:
                        break;
                    case 39: {
                        string.append('\r');
                    }
                    case 100:
                        break;
                    case 40: {
                        string.append('\"');
                    }
                    case 101:
                        break;
                    case 41: {
                        string.append('\'');
                    }
                    case 102:
                        break;
                    case 42: {
                        return symbol(CommonConstants.SymbolMapping.get(CommonConstants.SymbolName.NEW));
                    }
                    case 103:
                        break;
                    case 43: {
                        return symbol(CommonConstants.SymbolMapping.get(CommonConstants.SymbolName.INT));
                    }
                    case 104:
                        break;
                    case 44: {
                        return symbol(CommonConstants.SymbolMapping.get(CommonConstants.SymbolName.ELSE));
                    }
                    case 105:
                        break;
                    case 45: {
                        return symbol(CommonConstants.SymbolMapping.get(CommonConstants.SymbolName.BOOLEAN_LITERAL), true);
                    }
                    case 106:
                        break;
                    case 46: {
                        return symbol(CommonConstants.SymbolMapping.get(CommonConstants.SymbolName.THIS));
                    }
                    case 107:
                        break;
                    case 47: {
                        return symbol(CommonConstants.SymbolMapping.get(CommonConstants.SymbolName.MAIN));
                    }
                    case 108:
                        break;
                    case 48: {
                        return symbol(CommonConstants.SymbolMapping.get(CommonConstants.SymbolName.VOID));
                    }
                    case 109:
                        break;
                    case 49: {
                        return symbol(CommonConstants.SymbolMapping.get(CommonConstants.SymbolName.SIDEF));
                    }
                    case 110:
                        break;
                    case 50: {
                        return symbol(CommonConstants.SymbolMapping.get(CommonConstants.SymbolName.BOOLEAN_LITERAL), false);
                    }
                    case 111:
                        break;
                    case 51: {
                        return symbol(CommonConstants.SymbolMapping.get(CommonConstants.SymbolName.CLASS));
                    }
                    case 112:
                        break;
                    case 52: {
                        return symbol(CommonConstants.SymbolMapping.get(CommonConstants.SymbolName.WHILE));
                    }
                    case 113:
                        break;
                    case 53: {
                        return symbol(CommonConstants.SymbolMapping.get(CommonConstants.SymbolName.LENGTH));
                    }
                    case 114:
                        break;
                    case 54: {
                        return symbol(CommonConstants.SymbolMapping.get(CommonConstants.SymbolName.STATIC));
                    }
                    case 115:
                        break;
                    case 55: {
                        return symbol(CommonConstants.SymbolMapping.get(CommonConstants.SymbolName.STRING));
                    }
                    case 116:
                        break;
                    case 56: {
                        return symbol(CommonConstants.SymbolMapping.get(CommonConstants.SymbolName.RETURN));
                    }
                    case 117:
                        break;
                    case 57: {
                        return symbol(CommonConstants.SymbolMapping.get(CommonConstants.SymbolName.PUBLIC));
                    }
                    case 118:
                        break;
                    case 58: {
                        return symbol(CommonConstants.SymbolMapping.get(CommonConstants.SymbolName.BOOLEAN));
                    }
                    case 119:
                        break;
                    case 59: {
                        return symbol(CommonConstants.SymbolMapping.get(CommonConstants.SymbolName.EXTENDS));
                    }
                    case 120:
                        break;
                    case 60: {
                        return symbol(CommonConstants.SymbolMapping.get(CommonConstants.SymbolName.INTLIT), new Integer(Integer.MIN_VALUE));
                    }
                    case 121:
                        break;
                    case 61: {
                        return symbol(CommonConstants.SymbolMapping.get(CommonConstants.SymbolName.PRINTLN));
                    }
                    case 122:
                        break;
                    default:
                        zzScanError(ZZ_NO_MATCH);
                }
            }
        }
    }

    /**
     * Converts an int token code into the name of the
     * token by reflection on the cup symbol class/interface sym
     * <p>
     * This code was contributed by Karl Meissner <meissnersd@yahoo.com>
     */
    private String getTokenName(int token) {
        try {
            java.lang.reflect.Field[] classFields = Symbol.class.getFields();
            for (int i = 0; i < classFields.length; i++) {
                if (classFields[i].getInt(null) == token) {
                    return classFields[i].getName();
                }
            }
        } catch (Exception e) {
            e.printStackTrace(System.err);
        }

        return "UNKNOWN TOKEN";
    }

    /**
     * Same as next_token but also prints the token to standard out
     * for debugging.
     * <p>
     * This code was contributed by Karl Meissner <meissnersd@yahoo.com>
     */
    public java_cup.runtime.Symbol debug_next_token() throws java.io.IOException {
        java_cup.runtime.Symbol s = next_token();
        System.out.println("line:" + (yyline + 1) + " col:" + (yycolumn + 1) + " --" + yytext() + "--" + getTokenName(s.sym) + "--");
        return s;
    }

    /**
     * Runs the scanner on input files.
     * <p>
     * This main method is the debugging routine for the scanner.
     * It prints debugging information about each returned token to
     * System.out until the end of file is reached, or an error occured.
     *
     * @param argv the command line, contains the filenames to run
     *             the scanner on.
     */
    public static void main(String argv[]) {
        if (argv.length == 0) {
            System.out.println("Usage : java lexer.Lexer [ --encoding <name> ] <inputfile(s)>");
        } else {
            int firstFilePos = 0;
            String encodingName = "UTF-8";
            if (argv[0].equals("--encoding")) {
                firstFilePos = 2;
                encodingName = argv[1];
                try {
                    java.nio.charset.Charset.forName(encodingName); // Side-effect: is encodingName valid?
                } catch (Exception e) {
                    System.out.println("Invalid encoding '" + encodingName + "'");
                    return;
                }
            }
            for (int i = firstFilePos; i < argv.length; i++) {
                Lexer scanner = null;
                try {
                    java.io.FileInputStream stream = new java.io.FileInputStream(argv[i]);
                    java.io.Reader reader = new java.io.InputStreamReader(stream, encodingName);
                    scanner = new Lexer(reader);
                    while (!scanner.zzAtEOF) scanner.debug_next_token();
                } catch (java.io.FileNotFoundException e) {
                    System.out.println("File not found : \"" + argv[i] + "\"");
                } catch (java.io.IOException e) {
                    System.out.println("IO error scanning file \"" + argv[i] + "\"");
                    System.out.println(e);
                } catch (Exception e) {
                    System.out.println("Unexpected exception:");
                    e.printStackTrace();
                }
            }
        }
    }


}
