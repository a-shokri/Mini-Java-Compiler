//Author One: Junan Zhao
//Author Two: Anindo Saha
//Benchmark One: IntArrayList

  class IntArrayList 
{
    public static void main(String[] args)
  {
      sidef(new IAL().run());
      //new IAL().run();
  }
}
  
  class IAL
{ 
    int INITIAL_CAPACITY; 
    int[] data;
    int size; // The size of the list 

    public boolean init()
  {
      INITIAL_CAPACITY = 16;
      data = new int[INITIAL_CAPACITY];
      size = 0; // The size of the list 
      return true;
  }
    
    public boolean run()
  {
      sidef(this.init());
      sidef(this.test());
      return true;
  }
    
    public boolean test()
  { 
      sidef(this.add(size,10));   // Add it to the list
      //this.add(size,10); 
      System.out.println("(1) " + this.toString());

      sidef(this.add(0,23));    // Add it to the beginning of the list
      //this.add(0,23);   
      System.out.println("(2) " + this.toString());

      sidef(this.add(size,8));   // Add it to the end of the list
      //this.add(size,8);   
      System.out.println("(3) " + this.toString());

      sidef(this.add(size,24));   // Add it to the end of the list
      //this.add(size,24);  
      System.out.println("(4) " + this.toString());

      sidef(this.add(2,15));     // Add it to the list at index 2
      //this.add(2,15);  
      System.out.println("(5) " + this.toString());

      sidef(this.add(5,41));     // Add it to the list at index 5
      //this.add(5,41);  
      System.out.println("(6) " + this.toString());

    // Remove elements from the list
      sidef(this.remove(0));      //Remove the first element
      //this.remove(0); 
      System.out.println("(7) " + this.toString());

      sidef(this.remove(2));   // Remove the element at index 2
      //this.remove(2);   
      System.out.println("(8) " + this.toString());

      sidef(this.remove(size-1)); // Remove the last element
      //this.remove(size-1);   
      System.out.println("(9) " + this.toString());
      
      return true;
  }
    
  ///** Add a new element at the specified index in this list */
    public boolean add(int index, int value) 
  {
      int i;
      sidef(this.ensureCapacity()); 
      //this.ensureCapacity();
      i = size - 1;
      while(!(i<index))
        {
           data[i+1] = data[i];
           i = i -1;
        }
      data[index] = value;
      size = size + 1;
      return true;
  }

  ///** Create a new larger array, double the current size */
    public boolean ensureCapacity() 
  {
      int[] newData;
      int i;
      if(!(size<data.length))    
        {
           newData = new int[size*2+1];
           i = 0;
           while(i<size-1 || i==size-1)
             {
                newData[i] = data[i];
                i = i + 1;
             }
           data = newData;
        }   
      return true;
  }

  ///** Clear the list */
    public boolean clear() 
  {
      data = new int[INITIAL_CAPACITY];
      size = 0;
      return true;
  }

  ///** Return true if this list contains the element */
    public boolean contains(int value) 
  {
      int i;
      boolean result;
      result = false;
      i = 0;
      while(i<size-1 || i==size-1)
        {
           if(value==data[i]) result = true;
           i = i + 1;
        }
      return result; 
  }

  ///** Return the element from this list at the specified index */
    public int get(int index) 
  {
      return data[index];
  }

  ///** Return the index of the first matching element in this list.
   //*  Return -1 if no match. */
    public int indexOf(int value) 
  {
      int result;
      int i;
      result = 0 - 1;
      i = 0;
      while(i<size-1 || i==size-1)
        {
           if(value==data[i]) result = i;
           i = i + 1; 
        }
      return result;
  }

  // /** Return true if this list contains no elements */
    public boolean isEmpty() 
  {
      return size==0;
  }
  
  ///** Return the index of the last matching element in this list
  // *  Return -1 if no match. */
    public int lastIndexOf(int value) 
  {
      int result;
      int i;
      result = 0 - 1;
      i = size - 1;
      while(!(i<0))
        {
           if(value==data[i]) result = i;
           i = i - 1;
        }
      return result; 
  }
  
 // /** Remove the element at the specified position in this list
//   *  Shift any subsequent elements to the left.
//   *  Return the element that was removed from the list. */
    public int remove(int index) 
  {
      int value;
      int j;
      value = data[index];
      j = index;
      while(j<size-1)
        {
           data[j] = data[j+1];
           j = j + 1;
        }
      data[size-1] = 0; 
      size = size - 1;
      return value;
  }

  ///** Replace the element at the specified position in this list
 //  *  with the specified element. */
    public int set(int index, int value) 
  {
      int old;
      old = data[index];
      // C B Ali, should be rolled back
      //data[index] = value;
      return old;
  }

  ///** Override toString() to return elements in the list */
    public String toString() 
  {
      String result;
      int i;
      result = "[";
      i = 0; 
      while(i<size-1 || i==size-1)
        {
           result = result + data[i];
           if(i<size-1) result = result + ", ";  
           i = i + 1;
        }
      return result + "]";
  }

 // /** Trims the capacity to current size */
    public boolean trimToSize() 
  {
      int i;
      int[] newData;
      if(!(size==data.length))  // If size == capacity, no need to trim
        { 
           newData = new int[size];
           i = 0;
           while(i<size-1 || i==size-1)
             {
                newData[i] = data[i];
                i = i + 1;
             }
           data = newData;
        }
      return true;
  }
  
  ///** Return the number of elements in this list */
    public int size() 
  {
      return size;
  }
}

