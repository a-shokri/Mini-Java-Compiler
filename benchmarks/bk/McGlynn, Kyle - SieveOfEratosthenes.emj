/* Authors:
 * Richard Munson
 * Kyle McGlynn
 */

class SieveOfEratosthenes
{
	// builds an array containing the integers from a to b
	// includes both endpoints
	public int[] makeRange(int a, int b)
	{
		int length = a - b + 1;
		int[] array = new int[length];
		int i = 0;
		while (i < length)
		{
			array[i] = a + i;
			i = i + 1;
		}

		return array;
	}

	public int[] erosthenes(int limit)
	{
		int[] lst = makeRange(2, limit);
		int count = 0;  // count of the number of primes

		// process the sieve
		int i = 0;
		while (i < lst.length)
		{
			if (! (lst[i] == 0))
			{
				count = count + 1;
				int j = i + 1;
				while (j < lst.length)
				{
					if (lst[j] % lst[i] == 0)
					{
						lst[j] = 0;
					}
					j = j + 1;
				}
			}
			i = i + 1;
		}

		// combine into array of just primes
		int[] res = new int[count];
		i = 0;
		j = 0;

		while (i < lst.length)
		{
			if (! (lst[i] == 0))
			{
				res[j] = lst[i];
				j = j + 1;
			}

			i = i + 1;
		}

		return res;
	}

	public static void main(String[] args)
	{
		SieveOfEratosthenes test = new SieveOfEratosthenes();
		int[] r = test.erosthenes(100);
		int i = 0;
		while (i < r.length)
		{
			System.out.println(r[i]);

			i = i + 1;
		}

		//System.out.println("found " + Integer.toString(r.length) + " primes!");
	}
}
